package org.example.tables;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity // Marks the class as an entity that will be mapped to a database table.
@Table(name = "users") // Specifies the name of the table in the database for this entity.
@Data // Lombok annotation that generates getters, setters, toString, equals, and
      // hashCode methods.
@NoArgsConstructor // Lombok annotation that generates a no-argument constructor.
@AllArgsConstructor // Lombok annotation that generates an all-argument constructor (one that takes
                    // all fields).
public class Users {
    @Id // Marks this field as the primary key in the database.
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Specifies that the value for this field will be automatically
                                                        // generated.
    private Long id;

    // Fields to store the user's username, password, and email.
    private String username;
    private String password;
    private String email;

    // This constructor takes three arguments (username, password, and email) to
    // initialize a Users object.
    // Note that the 'id' field is not included here because it is auto-generated by
    // the database
    // due to the @GeneratedValue annotation on the 'id' field.
    // This means you do not need to manually set the 'id' value when creating a new
    // Users object,
    // as it will be automatically assigned by the database when the object is
    // persisted.
    // Therefore, the constructor only requires the other fields (username,
    // password, email) for initialization.
    public Users(String username, String password, String email) {
        this.username = username;
        this.password = password;
        this.email = email;
    }
}
